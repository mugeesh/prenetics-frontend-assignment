{"ast":null,"code":"import axios from 'axios';\nconst defaultBaseUrl = process.env.REACT_APP_API_BASEURL || 'http://localhost:8080/test/v1.0';\naxios.defaults.baseURL = defaultBaseUrl;\nexport const fetchResultsFormAPI = async state => {\n  let url = `/org/${process.env.REACT_APP_ORGANISATION_ID}/sample?limit=${state.pagination.limit}&offset=${state.pagination.current_page - 1}&`;\n  const params = new URLSearchParams();\n  let k;\n  for (k in state.search.query) {\n    console.log(`searching for ${k} with value ${state.search.query[k]}`);\n    if (state.search.query[k].length > 1) {\n      params.append(k, state.search.query[k]);\n    }\n  }\n  console.log(`final searching query >>> ${params.toString()}`);\n  url += params.toString();\n  try {\n    const res = await axios.get(url);\n    const {\n      data,\n      meta,\n      included\n    } = res.data;\n    return {\n      status: state.result.status,\n      data: data.map((result, i) => {\n        return {\n          patientName: included[i].attributes.name,\n          sampleId: result.attributes.sampleId,\n          result: result.attributes.result || '',\n          resultType: result.attributes.resultType,\n          resultTime: new Date(result.attributes.resultTime).toLocaleString(),\n          activationTime: new Date(result.attributes.activateTime).toLocaleString()\n        };\n      }),\n      meta: {\n        total: meta.total\n      }\n    };\n  } catch {\n    return {\n      status: 'rejected',\n      data: [],\n      meta: {\n        total: 0\n      }\n    };\n  }\n};","map":{"version":3,"names":["axios","defaultBaseUrl","process","env","REACT_APP_API_BASEURL","defaults","baseURL","fetchResultsFormAPI","state","url","REACT_APP_ORGANISATION_ID","pagination","limit","current_page","params","URLSearchParams","k","search","query","console","log","length","append","toString","res","get","data","meta","included","status","result","map","i","patientName","attributes","name","sampleId","resultType","resultTime","Date","toLocaleString","activationTime","activateTime","total"],"sources":["/Users/mugeesh/Downloads/orginal/New_FE/prenetics-frontend-assignment/src/components/api/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { RootState } from '../../store/store';\nimport { ApiResponseType } from '../types/types';\n\nconst defaultBaseUrl =\n  process.env.REACT_APP_API_BASEURL || 'http://localhost:8080/test/v1.0';\n   axios.defaults.baseURL = defaultBaseUrl;\n\nexport const fetchResultsFormAPI = async (state: RootState) => {\n    let url = `/org/${process.env.REACT_APP_ORGANISATION_ID}/sample?limit=${state.pagination.limit}&offset=${state.pagination.current_page - 1}&`;\n    const params = new URLSearchParams();\n\n    let k: keyof typeof state.search.query;\n    for (k in state.search.query) {\n        console.log(`searching for ${k} with value ${state.search.query[k]}`);\n        if (state.search.query[k]!.length > 1) {\n            params.append(k, state.search.query[k]!)\n        }\n    }\n    console.log(`final searching query >>> ${params.toString()}`);\n    url += params.toString();\n    try {\n        const res = await axios.get(url)\n        const { data, meta, included } = res.data as ApiResponseType;\n        return {\n            status: state.result.status,\n            data: data.map((result, i) => {\n                return {\n                    patientName: included[i].attributes.name,\n                    sampleId: result.attributes.sampleId,\n                    result: result.attributes.result || '',\n                    resultType: result.attributes.resultType,\n                    resultTime: new Date(result.attributes.resultTime).toLocaleString(),\n                    activationTime: new Date(result.attributes.activateTime).toLocaleString()\n                }\n            }),\n            meta: {\n                total: meta.total\n            }\n        }\n    } catch {\n        return {\n            status: 'rejected',\n            data: [],\n            meta: {\n                total: 0\n            }\n        }\n    }\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAIzB,MAAMC,cAAc,GAClBC,OAAO,CAACC,GAAG,CAACC,qBAAqB,IAAI,iCAAiC;AACrEJ,KAAK,CAACK,QAAQ,CAACC,OAAO,GAAGL,cAAc;AAE1C,OAAO,MAAMM,mBAAmB,GAAG,MAAOC,KAAgB,IAAK;EAC3D,IAAIC,GAAG,GAAG,QAAQP,OAAO,CAACC,GAAG,CAACO,yBAAyB,iBAAiBF,KAAK,CAACG,UAAU,CAACC,KAAK,WAAWJ,KAAK,CAACG,UAAU,CAACE,YAAY,GAAG,CAAC,GAAG;EAC7I,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;EAEpC,IAAIC,CAAkC;EACtC,KAAKA,CAAC,IAAIR,KAAK,CAACS,MAAM,CAACC,KAAK,EAAE;IAC1BC,OAAO,CAACC,GAAG,CAAC,iBAAiBJ,CAAC,eAAeR,KAAK,CAACS,MAAM,CAACC,KAAK,CAACF,CAAC,CAAC,EAAE,CAAC;IACrE,IAAIR,KAAK,CAACS,MAAM,CAACC,KAAK,CAACF,CAAC,CAAC,CAAEK,MAAM,GAAG,CAAC,EAAE;MACnCP,MAAM,CAACQ,MAAM,CAACN,CAAC,EAAER,KAAK,CAACS,MAAM,CAACC,KAAK,CAACF,CAAC,CAAE,CAAC;IAC5C;EACJ;EACAG,OAAO,CAACC,GAAG,CAAC,6BAA6BN,MAAM,CAACS,QAAQ,CAAC,CAAC,EAAE,CAAC;EAC7Dd,GAAG,IAAIK,MAAM,CAACS,QAAQ,CAAC,CAAC;EACxB,IAAI;IACA,MAAMC,GAAG,GAAG,MAAMxB,KAAK,CAACyB,GAAG,CAAChB,GAAG,CAAC;IAChC,MAAM;MAAEiB,IAAI;MAAEC,IAAI;MAAEC;IAAS,CAAC,GAAGJ,GAAG,CAACE,IAAuB;IAC5D,OAAO;MACHG,MAAM,EAAErB,KAAK,CAACsB,MAAM,CAACD,MAAM;MAC3BH,IAAI,EAAEA,IAAI,CAACK,GAAG,CAAC,CAACD,MAAM,EAAEE,CAAC,KAAK;QAC1B,OAAO;UACHC,WAAW,EAAEL,QAAQ,CAACI,CAAC,CAAC,CAACE,UAAU,CAACC,IAAI;UACxCC,QAAQ,EAAEN,MAAM,CAACI,UAAU,CAACE,QAAQ;UACpCN,MAAM,EAAEA,MAAM,CAACI,UAAU,CAACJ,MAAM,IAAI,EAAE;UACtCO,UAAU,EAAEP,MAAM,CAACI,UAAU,CAACG,UAAU;UACxCC,UAAU,EAAE,IAAIC,IAAI,CAACT,MAAM,CAACI,UAAU,CAACI,UAAU,CAAC,CAACE,cAAc,CAAC,CAAC;UACnEC,cAAc,EAAE,IAAIF,IAAI,CAACT,MAAM,CAACI,UAAU,CAACQ,YAAY,CAAC,CAACF,cAAc,CAAC;QAC5E,CAAC;MACL,CAAC,CAAC;MACFb,IAAI,EAAE;QACFgB,KAAK,EAAEhB,IAAI,CAACgB;MAChB;IACJ,CAAC;EACL,CAAC,CAAC,MAAM;IACJ,OAAO;MACHd,MAAM,EAAE,UAAU;MAClBH,IAAI,EAAE,EAAE;MACRC,IAAI,EAAE;QACFgB,KAAK,EAAE;MACX;IACJ,CAAC;EACL;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}